<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Neural networks: what a trend nowadays! It might seem like a kind of magic, but upon completing this project, you’ll see that you are already competent enough to build your own neural network. Your network will be able to recognize numeric data, allowing you to digitize checks and even figure out some captchas. If you aren’t too intimidated by words like “sigmoid” or “backpropagation”, click select and let’s get started!&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/51&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Digit Recognition" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="277" />
                <option name="stepId" value="5419" />
                <option name="title" value="Neuron creator" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="278" />
                <option name="stepId" value="5420" />
                <option name="title" value="The joy of recognition" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="279" />
                <option name="stepId" value="5421" />
                <option name="title" value="Learning time" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="280" />
                <option name="stepId" value="5422" />
                <option name="title" value="Layers" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="281" />
                <option name="stepId" value="5423" />
                <option name="title" value="On a bigger scale" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="282" />
                <option name="stepId" value="5424" />
                <option name="title" value="Backpropagation" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="6577" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="The first program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="30" />
                      <option name="theoryId" value="3520" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="112" />
                      <option name="theoryId" value="3513" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="146" />
                      <option name="theoryId" value="3519" />
                      <option name="title" value="Arithmetic operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="191" />
                      <option name="theoryId" value="3739" />
                      <option name="title" value="Write, compile and run" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="149" />
                      <option name="theoryId" value="3499" />
                      <option name="title" value="JVM, JRE and JDK" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="192" />
                      <option name="theoryId" value="3746" />
                      <option name="title" value="Running programs on your computer" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="113" />
                      <option name="theoryId" value="3603" />
                      <option name="title" value="Scanning the input" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="27" />
                      <option name="theoryId" value="3565" />
                      <option name="title" value="Integer types and operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="87" />
                      <option name="theoryId" value="3516" />
                      <option name="title" value="Boolean and logical operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="88" />
                      <option name="theoryId" value="3512" />
                      <option name="title" value="Relational operators" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="307" />
                      <option name="theoryId" value="5008" />
                      <option name="title" value="Increment and decrement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="31" />
                      <option name="theoryId" value="3514" />
                      <option name="title" value="Characters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="9" />
                      <option name="theoryId" value="3523" />
                      <option name="title" value="String" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="502" />
                      <option name="theoryId" value="6865" />
                      <option name="title" value="Units of information" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="362" />
                      <option name="theoryId" value="5544" />
                      <option name="title" value="Binary numbers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="309" />
                      <option name="theoryId" value="5035" />
                      <option name="title" value="Primitive and reference types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="4" />
                      <option name="theoryId" value="3511" />
                      <option name="title" value="Array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="89" />
                      <option name="theoryId" value="3505" />
                      <option name="title" value="The for-loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="90" />
                      <option name="theoryId" value="3498" />
                      <option name="title" value="The while and do-while loops" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="19" />
                      <option name="theoryId" value="3507" />
                      <option name="title" value="Branching statements" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="97" />
                      <option name="theoryId" value="3602" />
                      <option name="title" value="Iterating over arrays" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="98" />
                      <option name="theoryId" value="3551" />
                      <option name="title" value="Processing strings" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="12" />
                      <option name="theoryId" value="1933" />
                      <option name="title" value="Multi-dimensional array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="94" />
                      <option name="theoryId" value="3590" />
                      <option name="title" value="Defining methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="99" />
                      <option name="theoryId" value="3594" />
                      <option name="title" value="Arrays as parameters" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="59" />
                      <option name="theoryId" value="3570" />
                      <option name="title" value="Hierarchy of exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="65" />
                      <option name="theoryId" value="3552" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="172" />
                      <option name="theoryId" value="3635" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="176" />
                      <option name="theoryId" value="3648" />
                      <option name="title" value="Managing files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="163" />
                      <option name="theoryId" value="3536" />
                      <option name="title" value="Errors in programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="36" />
                      <option name="theoryId" value="3517" />
                      <option name="title" value="Floating-point types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="66" />
                      <option name="theoryId" value="3501" />
                      <option name="title" value="Math library" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="7" />
                      <option name="theoryId" value="3621" />
                      <option name="title" value="Package" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="17" />
                      <option name="theoryId" value="3535" />
                      <option name="title" value="Constructor" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="96" />
                      <option name="theoryId" value="4727" />
                      <option name="title" value="Objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="116" />
                      <option name="theoryId" value="3495" />
                      <option name="title" value="Instance methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="28" />
                      <option name="theoryId" value="3589" />
                      <option name="title" value="Access modifiers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="24" />
                      <option name="theoryId" value="3599" />
                      <option name="title" value="Getters and setters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="301" />
                      <option name="theoryId" value="4910" />
                      <option name="title" value="Random" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="8" />
                      <option name="theoryId" value="3583" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="100" />
                      <option name="theoryId" value="3598" />
                      <option name="title" value="Serialization basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="103" />
                      <option name="theoryId" value="3616" />
                      <option name="title" value="Custom serialization" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="173" />
                      <option name="theoryId" value="3636" />
                      <option name="title" value="Reading files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="177" />
                      <option name="theoryId" value="3652" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="159" />
                      <option name="theoryId" value="3556" />
                      <option name="title" value="Strategy" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="37" />
                      <option name="theoryId" value="3525" />
                      <option name="title" value="Overloading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="38" />
                      <option name="theoryId" value="3534" />
                      <option name="title" value="Static members" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="120" />
                      <option name="theoryId" value="3538" />
                      <option name="title" value="Multiple constructors" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="127" />
                      <option name="theoryId" value="3588" />
                      <option name="title" value="The keyword super" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="5" />
                      <option name="theoryId" value="3572" />
                      <option name="title" value="Hiding and overriding" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="491" />
                      <option name="theoryId" value="6692" />
                      <option name="title" value="Protected modifier" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="128" />
                      <option name="theoryId" value="3585" />
                      <option name="title" value="Referencing subclass objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="2" />
                      <option name="theoryId" value="3587" />
                      <option name="title" value="Polymorphism" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="122" />
                      <option name="theoryId" value="3597" />
                      <option name="title" value="Abstract class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="124" />
                      <option name="theoryId" value="3615" />
                      <option name="title" value="Interface" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="123" />
                      <option name="theoryId" value="3563" />
                      <option name="title" value="Abstract class vs interface" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Neural networks: what a trend nowadays! It might seem like a kind of magic, but upon completing this project, you’ll see that you are already competent enough to build your own neural network. Your network will be able to recognize numeric data, allowing you to digitize checks and even figure out some captchas. If you aren’t too intimidated by words like “sigmoid” or “backpropagation”, click select and let’s get started!" />
              <option name="id" value="51" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/209949/additional_files.json" />
              <option name="language" value="java" />
              <option name="templateBased" value="false" />
              <option name="title" value="Digit Recognition" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="2" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Digit Recognition" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Theory&lt;/h2&gt;&#10;&#10;&lt;p&gt;Recognizing digits is a hard task. Today it is a classic example of what machine learning can do. In this first stage, you will write a program that can differentiate between one and zero on a 3x3 grid.&lt;/p&gt;&#10;&#10;&lt;p&gt;The grid looks like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;126&quot; src=&quot;https://ucarecdn.com/1d9349d1-e0f0-4ad5-844f-a3a3dbbe4c9b/&quot; width=&quot;127&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;If you want to draw a zero here, you probably would draw this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;128&quot; src=&quot;https://ucarecdn.com/163d834d-32a3-41a0-91bd-cad2c04b944b/&quot; width=&quot;126&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And if you want to draw a one here, you probably would draw this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;130&quot; src=&quot;https://ucarecdn.com/80adac5a-5cfa-4102-84ad-a9ceef4af8e3/&quot; width=&quot;129&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Suppose you want to write a program that can take 9 numbers corresponding to these 9 cells (they contain 1 if the corresponding cell is blue and 0 if the corresponding cell is white) and output 1 or 0. It can be pretty easy, just check all cells around the middle, and output 0, else check for the straight vertical line in the middle and output 1, right?&lt;/p&gt;&#10;&#10;&lt;p&gt;Well, it isn't that easy. The general problem in recognizing &lt;strong&gt;handwritten &lt;/strong&gt;digits is that every digit can be written differently. For example, zeros may be written like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;129&quot; src=&quot;https://ucarecdn.com/f9ebdf3d-ab90-4bcf-b07d-c563eeac288d/&quot; width=&quot;492&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And ones may be written like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;134&quot; src=&quot;https://ucarecdn.com/2e456d56-9c52-45c1-9cb1-322fb53a6131/&quot; width=&quot;492&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Your program still should recognize these as zeros or ones.&lt;/p&gt;&#10;&#10;&lt;p&gt;Machine learning uses neural networks to perform difficult tasks like this. Every network consists of neurons. It always has input neurons and output neurons. Except for the input neurons, every other neuron performs simple mathematical calculations. It sums up weights of the connections multiplied by values of the neurons corresponding to these connections. Let's see an example:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;250&quot; src=&quot;https://ucarecdn.com/b88d806a-4bbf-4d90-b544-820192c72b1f/&quot; width=&quot;270&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;In this example, there are four neurons. Note that $w$ in the graph stands for a &lt;strong&gt;weight &lt;/strong&gt;of the edge and $ a $ stands for a &lt;strong&gt;value of the neuron&lt;/strong&gt;. Three of them are input neurons (it is $ a_1 $, $ a_2 $, $ a_3 $) and the last one is the output neuron ($ a_4 $). The $ a_4 $ neuron performs the mathematical operations described above. In mathematical notation it looks like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ a_4 = a_1 * w_1 + a_2 * w_2 + a_3 * w_3 $&lt;/p&gt;&#10;&#10;&lt;p&gt;Note that if all of the weights or all of the neurons equal zero, then the value of the output neuron also equals zero. If the weights and input neurons are positive, then the output neuron is also positive, and the same goes for negative values. But in practice the value of the neuron should be almost always be centered not around zero but around another value, called a &lt;strong&gt;bias&lt;/strong&gt;. For this reason, a special input neuron should be added with value 1 with weight $ b $ (from the word bias). Take a look at the upgraded graph below:&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;355&quot; src=&quot;https://ucarecdn.com/5b20fc2e-e40d-4e97-9049-1297e9378d44/&quot; width=&quot;271&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Now, in mathematical notation it looks like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ a_4 = a_1 * w_1 + a_2 * w_2 + a_3 * w_3 + b $&lt;/p&gt;&#10;&#10;&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you need to write a function that simulates a neural network with 9 input neurons and 1 output neuron. This neural network should recognize 0 or 1 from the 3x3 grid. So, every cell from the grid is considered as input neuron. If the cell is blue then the corresponding neuron equals 1, and if the cell is white then equals 0. For example, this grid setup:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;143&quot; src=&quot;https://ucarecdn.com/7c450421-9edb-4f48-b68f-96bd80cdfaf1/&quot; width=&quot;140&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Should be mapped to the neurons like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;152&quot; src=&quot;https://ucarecdn.com/df521d20-5488-4b44-a7a3-b6e0f7ee7091/&quot; width=&quot;149&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And it should correspond with this neural network (the values of the neurons are written to the left of the neurons):&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;521&quot; src=&quot;https://ucarecdn.com/1ac98cf2-034b-4214-800c-cecef5e94347/&quot; width=&quot;242&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;For actual machine learning, the computer should figure out the best weights and biases on its own (using an algorithm written by a programmer, of course), but in this stage, you will not write this algorithm. Instead, use these pre-calculated (pretty accurate) weights:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_1 = 2, w_2 = 1, w_3 = 2, w_4 = 4, w_5 = -4, $&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_6 = 4, w_7 = 2, w_8 = -1, w_9 = 2, b = -5 $&lt;/p&gt;&#10;&#10;&lt;p&gt;For these weights, you can interpret a value of the $ a_{10} $ neuron pretty easily. If it is positive then the result is zero, else the result is one. For example, for the grid above:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ a_{10} = 1 * 2 + 1 * 1 + 0 * 2 + 1 * 4+ 0 * -4+ 1 * 4 + 0 * 2 + 1 * -1 + 0 * 2 -5 = 5 $&lt;/p&gt;&#10;&#10;&lt;p&gt;The result is positive, so the number above is 0. Another example, for this grid:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;157&quot; src=&quot;https://ucarecdn.com/7915c5b5-672d-4092-aa16-dc6f5ff905f4/&quot; width=&quot;157&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;$ a_{10}=1∗2+1∗1+0∗2+0∗4+1∗−4+0∗4+0∗2+1∗−1+0∗2−5=−7 $&lt;/p&gt;&#10;&#10;&lt;p&gt;The result is negative, so the number above is 1. It's pretty fantastic that this simple math can differentiate zero or one on the 3x3 image!&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;The example below shows how your output should look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid:&#10;_X_&#10;_X_&#10;XX_&#10;This number is 1&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid :&#10;_XX&#10;X_X&#10;XXX&#10;This number is 0&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid:&#10;_X_&#10;_X_&#10;X__&#10;This number is 1&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid:&#10;_X_&#10;X_X&#10;_X_&#10;This number is 0&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/51/stages/277/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5419" />
                      <option name="index" value="1" />
                      <option name="name" value="Neuron creator" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/recognition/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/recognition/Main.java" />
                                <option name="text" value="package recognition;&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        int w1=2, w2=1, w3=2, w4=4, w5=-4, w6=4, w7=2, w8=-1, w9=2, b=-5;&#10;        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        String line2 = sc.nextLine();&#10;        String line3 = sc.nextLine();&#10;        String line4 = sc.nextLine();&#10;&#10;        if (line2.charAt(0) == '_') {&#10;            a1 = 0;&#10;        } else {&#10;            a1 = 1;&#10;        }&#10;&#10;        if (line2.charAt(1) == '_') {&#10;            a2 = 0;&#10;        } else {&#10;            a2 = 1;&#10;        }&#10;&#10;        if (line2.charAt(2) == '_') {&#10;            a3 = 0;&#10;        } else {&#10;            a3 = 1;&#10;        }&#10;&#10;        if (line3.charAt(0) == '_') {&#10;            a4 = 0;&#10;        } else {&#10;            a4 = 1;&#10;        }&#10;&#10;        if (line3.charAt(1) == '_') {&#10;            a5 = 0;&#10;        } else {&#10;            a5 = 1;&#10;        }&#10;&#10;        if (line3.charAt(2) == '_') {&#10;            a6 = 0;&#10;        } else {&#10;            a6 = 1;&#10;        }&#10;&#10;        if (line4.charAt(0) == '_') {&#10;            a7 = 0;&#10;        } else {&#10;            a7 = 1;&#10;        }&#10;&#10;        if (line4.charAt(1) == '_') {&#10;            a8 = 0;&#10;        } else {&#10;            a8 = 1;&#10;        }&#10;&#10;        if (line4.charAt(2) == '_') {&#10;            a9 = 0;&#10;        } else {&#10;            a9 = 1;&#10;        }&#10;&#10;        a10 = a1*w1 + a2+w2 + a3*w3 + a4*a4 + a5+w5 + a6*w6 + a7*w7 + a8+w8 + a9+w9;&#10;&#10;        if(a10 &gt; 0) {&#10;            System.out.println(&quot;This number is 1&quot;);&#10;        } else {&#10;            System.out.println(&quot;This number is 0&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/DigitRecognitionTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/DigitRecognitionTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import recognition.Main;&#10;&#10;import java.util.List;&#10;&#10;&#10;class Clue {&#10;    String answer;&#10;    String opposite;&#10;    String input;&#10;    Clue(int ans) {&#10;        answer = Integer.toString(ans);&#10;        if (ans == 1) {&#10;            opposite = &quot;0&quot;;&#10;        }&#10;        else {&#10;            opposite = &quot;1&quot;;&#10;        }&#10;    }&#10;}&#10;&#10;public class DigitRecognitionTest extends BaseStageTest&lt;Clue&gt; {&#10;    public DigitRecognitionTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        List&lt;TestCase&lt;Clue&gt;&gt; tests = List.of(&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;_XX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;X__\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;_X_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;_XX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;_XX\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot;)&#10;            );&#10;&#10;        for (TestCase&lt;Clue&gt; test : tests) {&#10;            test.getAttach().input = test.getInput();&#10;        }&#10;&#10;        return tests;&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        boolean result =&#10;            reply.contains(clue.answer)&#10;            &amp;&amp; !reply.contains(clue.opposite);&#10;&#10;        String feedback = &quot;The input is:\n&quot;&#10;            + clue.input + &quot;\nYour output is:\n&quot;&#10;            + reply;&#10;&#10;        return new CheckResult(result, feedback);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563900129000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Theory&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's try to recognize more different numbers—all of them, from 0 to 9. For this, we need to increase the grid from 3x3 to 5x3, the absolute minimum to write all the numbers.&lt;/p&gt;&#10;&#10;&lt;p&gt;First, check out &lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this great video&lt;/a&gt; about this topic. It covers a lot more than you need in this stage and will be recommended in the next stages, too. You don't need to remember everything from this video.&lt;/p&gt;&#10;&#10;&lt;p&gt;Numbers should look like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;269&quot; src=&quot;https://ucarecdn.com/38618c71-71bc-4b6e-a6a1-280233b03733/&quot; width=&quot;441&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, the output no longer can be binary (either less or greater than zero). But can we do the following: if the sum is less than zero then the result should be considered as zero, if the sum is between zero and one then the output value should be considered as one, ... , if the sum is greater than 8 then the output value should be considered as 9? This solution is bad for two reasons:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;The distribution of the output numbers is uneven. Most of the number line is dedicated to only two numbers: 0 and 9. Generally, it is impossible to divide one number line into 9 even parts. (It is possible if the part from -1 to 10 repeats forever, but this would be a total mess.)&lt;/li&gt;&#10;&#9;&lt;li&gt;In our case, some numbers appear in the number line close to each other but look very different. For example, 7 and 8, as well as 1 and 2, are very different but there’s just a single unit between them in the output number line,. There is another situation in which some similar numbers lie far from each other. For example, 6 and 8 which differ, in only 1 cell. Generally, it is impossible to rearrange them in a way that everything similar is near each other and everything dissimilar is far from each other.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;The solution for this is multiple output neurons. The best way of doing it would be a single output neuron per each possible output value. In our case, that would be 10 output neurons.&lt;/p&gt;&#10;&#10;&lt;p&gt;Every input neuron should be connected to every output neuron like in the picture below:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;493&quot; src=&quot;https://ucarecdn.com/811bc287-2874-4720-b214-3fcea852cc23/&quot; width=&quot;464&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;As you can see, there are a lot of lines, representing weights. In fact, there should be exactly 16 * 10 = 160 weights total. Also, you may notice the numbers 1 and 2 on the top of the neuron. This is not exponentiation, but a special mark to indicate the layer number. The layer is a vertical line of neurons. This network above has two layers, but in the next stage, we consider a network with more than two layers. So, if you see this notation in the formulas: $ a^2_6 $ you can say that this is a neuron from the second layer and it is 6th from the top.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should write such a network with two layers. The weights are defined in a pretty simple way: 1 for a blue and -1 for a white. For the first output neuron, you should set 15 weights for the number 1, for the second output neuron you should set another 15 weights for the number 2 etc and the last output neuron should recognize the number 0. In the end, you should choose the maximum out of all output neurons and it will be the result of the recognition.&lt;/p&gt;&#10;&#10;&lt;p&gt;Now take note that the best result of recognition of the number 1 is 5, but the result of the recognition of the number 8 is 13 since the number 1 has 5 blue points and the number 8 has 13 blue points. To equalize all the numbers you need a bias. It should be:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;6 for 1&lt;/li&gt;&#10;&#9;&lt;li&gt;0 for 2, 3, 5&lt;/li&gt;&#10;&#9;&lt;li&gt;2 for 4&lt;/li&gt;&#10;&#9;&lt;li&gt;4 for 7&lt;/li&gt;&#10;&#9;&lt;li&gt;-2 for 8&lt;/li&gt;&#10;&#9;&lt;li&gt;-1 for 6, 9, 0&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;h2&gt;Output examples&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid:&#10;_X_&#10;_X_&#10;XX_&#10;XX_&#10;_XX&#10;This number is 1&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid:&#10;XX_&#10;__X&#10;__X&#10;X__&#10;XXX&#10;This number is 2&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Input grid:&#10;XXX&#10;X_X&#10;__X&#10;__X&#10;__X&#10;This number is 7&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/51/stages/278/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5420" />
                      <option name="index" value="2" />
                      <option name="name" value="The joy of recognition" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/DigitRecognitionTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/DigitRecognitionTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import recognition.Main;&#10;&#10;import java.util.List;&#10;&#10;class Clue {&#10;    String answer;&#10;    Clue(int ans) {&#10;        answer = Integer.toString(ans);&#10;    }&#10;}&#10;&#10;public class DigitRecognitionTest extends BaseStageTest&lt;Clue&gt; {&#10;    public DigitRecognitionTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;XX_\n&quot; +&#10;                    &quot;XX_\n&quot; +&#10;                    &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(2))&#10;                .setInput(&#10;                    &quot;XX_\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;X__\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(7))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(9))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(3))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(4))&#10;                .setInput(&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(5))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X__\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(8))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(6))&#10;                .setInput(&#10;                    &quot;_XX\n&quot; +&#10;                    &quot;X__\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;&#10;&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot; +&#10;                    &quot;_X_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(2))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X__\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(3))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(4))&#10;                .setInput(&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(5))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X__\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(6))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X__\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(7))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(8))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(9))&#10;                .setInput(&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;X_X\n&quot; +&#10;                    &quot;XXX\n&quot; +&#10;                    &quot;__X\n&quot; +&#10;                    &quot;XXX\n&quot;)&#10;&#10;            );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        boolean contains = reply.contains(clue.answer);&#10;        if (!contains) {&#10;            return CheckResult.FALSE;&#10;        }&#10;        for (int i = 0; i &lt; 10; i++) {&#10;            String num = Integer.toString(i);&#10;            if (!num.equals(clue.answer) &amp;&amp; reply.contains(num)) {&#10;                return new CheckResult(false,&#10;                    &quot;Along with the right answer, &quot; +&#10;                        &quot;number &quot; + i + &quot; was found in the output&quot;);&#10;            }&#10;        }&#10;        return CheckResult.TRUE;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/recognition/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/recognition/Main.java" />
                                <option name="text" value="package recognition;&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        int w1=2, w2=1, w3=2, w4=4, w5=-4, w6=4, w7=2, w8=-1, w9=2, b=-5;&#10;        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        String line2 = sc.nextLine();&#10;        String line3 = sc.nextLine();&#10;        String line4 = sc.nextLine();&#10;&#10;        if (line2.charAt(0) == '_') {&#10;            a1 = 0;&#10;        } else {&#10;            a1 = 1;&#10;        }&#10;&#10;        if (line2.charAt(1) == '_') {&#10;            a2 = 0;&#10;        } else {&#10;            a2 = 1;&#10;        }&#10;&#10;        if (line2.charAt(2) == '_') {&#10;            a3 = 0;&#10;        } else {&#10;            a3 = 1;&#10;        }&#10;&#10;        if (line3.charAt(0) == '_') {&#10;            a4 = 0;&#10;        } else {&#10;            a4 = 1;&#10;        }&#10;&#10;        if (line3.charAt(1) == '_') {&#10;            a5 = 0;&#10;        } else {&#10;            a5 = 1;&#10;        }&#10;&#10;        if (line3.charAt(2) == '_') {&#10;            a6 = 0;&#10;        } else {&#10;            a6 = 1;&#10;        }&#10;&#10;        if (line4.charAt(0) == '_') {&#10;            a7 = 0;&#10;        } else {&#10;            a7 = 1;&#10;        }&#10;&#10;        if (line4.charAt(1) == '_') {&#10;            a8 = 0;&#10;        } else {&#10;            a8 = 1;&#10;        }&#10;&#10;        if (line4.charAt(2) == '_') {&#10;            a9 = 0;&#10;        } else {&#10;            a9 = 1;&#10;        }&#10;&#10;        a10 = a1*w1 + a2+w2 + a3*w3 + a4*a4 + a5+w5 + a6*w6 + a7*w7 + a8+w8 + a9+w9;&#10;&#10;        if(a10 &gt; 0) {&#10;            System.out.println(&quot;This number is 1&quot;);&#10;        } else {&#10;            System.out.println(&quot;This number is 0&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1564041740000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Theory&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you will develop a neural network that can perform simple learning.&lt;/p&gt;&#10;&#10;&lt;p&gt;Let's forget that we know what ideal weights and biases should look like. The neural network should find them on its own, or at least get something reasonable and similar to the ideal weights you programmed in the previous stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;First, take note that your output neurons can vary from values less than zero; they can be greater than 10, for example. In the previous stage, we fixed this by a workaround solution with special biases; in this stage we can't control the biases since they should be changed by a learning process and not hardcoded. The possible solution is to normalize the outputs so they vary only from 0 to 1. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Sigmoid_function&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Sigmoid function&lt;/a&gt; is the best choice to do that. You can also check out &lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this video&lt;/a&gt; from the previous stage to help to understand it. It can be written shortly as S(x).&lt;/p&gt;&#10;&#10;&lt;p&gt;$ Sigmoid(x) = S(x) = 1 / (1 + e ^{-x}) $&lt;/p&gt;&#10;&#10;&lt;p&gt;The algorithm you should implement is called the Delta rule. It's very simple. For every iteration you should find the difference of the current weight between the current iteration and the next iteration. Here is the formula:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_{(a_i, a_j)} = \eta * a_i * (a_j^{ideal} - a_j)$&lt;/p&gt;&#10;&#10;&lt;p&gt;Where $ \Delta w_{(a_i, a_j)} $ means a difference of the weight between $ a_i $ and $ a_j $. An $ a_j^{ideal} $ means the ideal value; it should be a minimum if the output neuron should be off and should be a maximum if the output neuron should be on. Since the maximum and the minimum of the Sigmoid function are 1 and 0, you should use 1 and 0 as ideal values. $\eta$ is the learning rate coefficient; it can vary from 0.1 or less to 10 or more. In this stage use the value 0.5.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember, the ideal weights are not the ideal outputs. You can't use the ideal weights - the computer should get it on its own, but the ideal outputs should be used in the process of the neural learning.&lt;/p&gt;&#10;&#10;&lt;p&gt;After that, you can calculate the next value for this weight. Use the following formula. Notice that the number on the top right means the &lt;strong&gt;generation &lt;/strong&gt;number of this neural network. Usually, when all the weights are updated to the new ones, the generation increases by 1. And $ mean $ means that you should calculate the mean value among all differences (it can be more than one; in this stage, there should be 10 differences, one for each number from 0 to 9).&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_{(a_i, a_j)}^{n+1} = w_{(a_i, a_j)}^{n} + \Delta w_{(a_i, a_j)}^{mean}$&lt;/p&gt;&#10;&#10;&lt;p&gt;Let's see the example. For simplicity, we will use a set of two numbers: 2 and 4.&lt;/p&gt;&#10;&#10;&lt;p&gt;The ideal output for two should be a single 1 in the output neuron that represents two, and all others should be zero. The ideal output for 4 should be a single 1 in the output neuron that represents four, and all other output neurons should be 0. This is considered an ideal scenario. Let's take the first 3 input neurons and three weights:&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;400&quot; src=&quot;https://ucarecdn.com/de5f1711-5028-4e2c-aa0f-31c7f7e7a185/&quot; width=&quot;341&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;Let's imagine that currently $ w_1 = 0.2 $, $ w_2 = 0.5 $, $ w_3 = 0.7 $ .&lt;br&gt;&#10;   &lt;/p&gt;&#10;&#10;&lt;p&gt;The first three input neurons for the number 4 would be 1, 0, 1 (top row).  The ideal values for the number 4 are 0, 0, 0, 1, 0, 0 ..., so the second ideal output neuron should be 0. Next, we will use the second formula of this stage. $ a_5 $ in this case would be, for example $ S( a_1 * w_1 + a_2 * w_2 + a_3 * w_3 + ... + b ) = 0.8 $ .&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_1 = \mu * a_1 * (a_5^{ideal} - a_5 ) = 0.5 * 1 * (0 - 0.8) = -0.4$&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_2 = \mu * a_2 * (a_5^{ideal} - a_5 ) = 0.5 * 0 * (0 - 0.8) = 0 $&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_3 = \mu * a_3 * (a_5^{ideal} - a_5 ) = 0.5 * 1 * (0 - 0.8) = -0.4$&lt;/p&gt;&#10;&#10;&lt;p&gt;Now, let's take the number 2. The first three input neurons for the number 2 would be 1, 1, 1. The ideal values for the number 2 are 0, 1, 0, 0, 0, ... so the second ideal output neuron should be 1. $ a_5 $ in this example would be, let's say 0.7 (you should recalculate in from the input neurons that represents a 2).&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_1 = \mu * a_1 * (a_5^{ideal} - a_5 ) = 0.5 * 1 * (1 - 0.7) = 0.15$&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_2 = \mu * a_2 * (a_5^{ideal} - a_5 ) = 0.5 * 1 * (1 - 0.7) = 0.15 $&lt;/p&gt;&#10;&#10;&lt;p&gt;$  \Delta w_3 = \mu * a_3 * (a_5^{ideal} - a_5 ) = 0.5 * 1 * (1 - 0.7) = 0.15$&lt;/p&gt;&#10;&#10;&lt;p&gt;After processing all the numbers from 0 to 9 you can calculate the mean of the differences:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_1^{mean} = (-0.4 + 0.15)/2 = -0.125 $&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_2^{mean} = (0 + 0.15)/2 = 0.075$&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_3^{mean} = (-0.4 + 0.15)/2 = -0.125 $&lt;/p&gt;&#10;&#10;&lt;p&gt;And at last, after that you can calculate the weights for the new generation:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_1 = w_1 + \Delta w_1^{mean} = 0.2 - 0.125 = 0.075 $&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_2 = w_2 + \Delta w_2^{mean} = 0.5 + 0.075 = 0.575$&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_3 = w_3 + \Delta w_3^{mean} = 0.7 - 0.125 = 0.575$&lt;/p&gt;&#10;&#10;&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should implement such an algorithm. Initially, you can set all the weights to zero, but the best way to initialize the weights is to set them as random Gaussian numbers.&lt;/p&gt;&#10;&#10;&lt;p&gt;How long should it take for the programs to learn to get a good result? You can try with 10, 100, and 1000 generations. Generally, you can stop learning if your weights aren't changing generation after generation, or if they’re changing only a little. That means you hit a local minimum.&lt;/p&gt;&#10;&#10;&lt;p&gt;You should separate the learning logic and guessing logic (it can be two different items in the console menu). After the learning, you should save the learned network into the file using serialization and use this file during guessing.&lt;/p&gt;&#10;&#10;&lt;p&gt;Tests of this stage only check for guessing numbers, not learning so you need to make sure the network is loading correctly at the start of the program. This means tests never check option 1 from the output examples below.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;1. Learn the network&#10;2. Guess a number&#10;Your choice: 1&#10;Learning...&#10;Done! Saved to the file.&#10;1. Learn the network&#10;2. Guess a number&#10;Your choice: 2&#10;Input grid:&#10;XX_&#10;__X&#10;_XX&#10;X__&#10;XXX&#10;This number is 2&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/51/stages/279/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5421" />
                      <option name="index" value="3" />
                      <option name="name" value="Learning time" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="test/DigitRecognitionTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/DigitRecognitionTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import recognition.Main;&#10;&#10;import java.util.*;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;class Clue {&#10;    String answer;&#10;    Clue(int ans) {&#10;        answer = Integer.toString(ans);&#10;    }&#10;}&#10;&#10;public class DigitRecognitionTest extends BaseStageTest&lt;Clue&gt; {&#10;    public DigitRecognitionTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;2\n_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;XX_\n&quot; +&#10;                        &quot;XX_\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(2))&#10;                .setInput(&#10;                    &quot;2\nXX_\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(7))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(9))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(3))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(4))&#10;                .setInput(&#10;                    &quot;2\nX_X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(5))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(8))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(6))&#10;                .setInput(&#10;                    &quot;2\n_XX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;&#10;&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;2\n_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;_X_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(2))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(3))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(4))&#10;                .setInput(&#10;                    &quot;2\nX_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(5))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(6))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(7))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(8))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(9))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot;)&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        List&lt;String&gt; lines = reply.lines().collect(Collectors.toList());&#10;        String lastLine = lines.get(lines.size() - 1);&#10;&#10;        String[] lastLineWords = lastLine.split(&quot;\\s+&quot;);&#10;&#10;        List&lt;String&gt; foundedNumbers = new ArrayList&lt;&gt;();&#10;        for (String word : lastLineWords) {&#10;            if (word.matches(&quot;[0-9]+&quot;)) {&#10;                foundedNumbers.add(word);&#10;            }&#10;        }&#10;&#10;        if (foundedNumbers.size() &gt; 1) {&#10;            String numbers = String.join(&quot;, &quot;, foundedNumbers);&#10;            return new CheckResult(false,&#10;                &quot;Last line contains several numbers, &quot; +&#10;                    &quot;you should output only one number.\n&quot; +&#10;                    &quot;Numbers found: &quot; + numbers);&#10;        }&#10;&#10;        if (foundedNumbers.size() == 0) {&#10;            return new CheckResult(false,&#10;                &quot;Last line in output &quot; +&#10;                    &quot;doesn't contain any numbers.&quot;);&#10;        }&#10;&#10;        String founded = foundedNumbers.get(0);&#10;&#10;        if (!founded.equals(clue.answer)) {&#10;            return new CheckResult(false,&#10;                &quot;Last line contains number &quot; + founded + &quot; &quot; +&#10;                    &quot;but expected to contain number &quot; + clue.answer);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/recognition/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/recognition/Main.java" />
                                <option name="text" value="package recognition;&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        int w1=2, w2=1, w3=2, w4=4, w5=-4, w6=4, w7=2, w8=-1, w9=2, b=-5;&#10;        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        String line2 = sc.nextLine();&#10;        String line3 = sc.nextLine();&#10;        String line4 = sc.nextLine();&#10;&#10;        if (line2.charAt(0) == '_') {&#10;            a1 = 0;&#10;        } else {&#10;            a1 = 1;&#10;        }&#10;&#10;        if (line2.charAt(1) == '_') {&#10;            a2 = 0;&#10;        } else {&#10;            a2 = 1;&#10;        }&#10;&#10;        if (line2.charAt(2) == '_') {&#10;            a3 = 0;&#10;        } else {&#10;            a3 = 1;&#10;        }&#10;&#10;        if (line3.charAt(0) == '_') {&#10;            a4 = 0;&#10;        } else {&#10;            a4 = 1;&#10;        }&#10;&#10;        if (line3.charAt(1) == '_') {&#10;            a5 = 0;&#10;        } else {&#10;            a5 = 1;&#10;        }&#10;&#10;        if (line3.charAt(2) == '_') {&#10;            a6 = 0;&#10;        } else {&#10;            a6 = 1;&#10;        }&#10;&#10;        if (line4.charAt(0) == '_') {&#10;            a7 = 0;&#10;        } else {&#10;            a7 = 1;&#10;        }&#10;&#10;        if (line4.charAt(1) == '_') {&#10;            a8 = 0;&#10;        } else {&#10;            a8 = 1;&#10;        }&#10;&#10;        if (line4.charAt(2) == '_') {&#10;            a9 = 0;&#10;        } else {&#10;            a9 = 1;&#10;        }&#10;&#10;        a10 = a1*w1 + a2+w2 + a3*w3 + a4*a4 + a5+w5 + a6*w6 + a7*w7 + a8+w8 + a9+w9;&#10;&#10;        if(a10 &gt; 0) {&#10;            System.out.println(&quot;This number is 1&quot;);&#10;        } else {&#10;            System.out.println(&quot;This number is 0&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563900129000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Theory&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you will improve your neural network. It will contain not only input and output layers, but also hidden layers.&lt;/p&gt;&#10;&#10;&lt;p&gt;The general representation of the multilayer neural network is shown in the picture below:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;433&quot; src=&quot;https://ucarecdn.com/6e56356f-4948-4666-ab09-6bec5ee8f15f/&quot; width=&quot;594&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;As you can see, it has a lot of layers. The one to the left is input layer, and the one to the right is the output layer, and everything else is called hidden layers. Every layer can have a different number of neurons in it. But in practice, all hidden layers often have the same number of neurons inside.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember, that biases always have the value 1 inside the neuron so there are no arrows into biases.&lt;/p&gt;&#10;&#10;&lt;p&gt;This concrete neural network has $ r $ layers. The first layer has $ x $ input neurons and one bias, the second layer has $ n $ neurons and one bias, the third layer has $ m $ neurons and one bias, the pre-last layer has $ k $ neurons and one bias and the last layer has $ p $ output neurons.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage you need to create functionality that allows you to create neural networks with hidden layers and ability to learn from a set of input data and the corresponding ideal output. The neural network should learn from 10 samples with 10 corresponding ideal outputs. Remember that ideal output is a set of numbers with a single 1 and all others are zeros.&lt;/p&gt;&#10;&#10;&lt;p&gt;One undescribed thing is how to update weights in the middle, when there is no ideal value for the neurons in the middle. You know how to update weights pointing from the next-to-last layer to the last layer since the last layer contains the ideal values for the neurons.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can start from the end and define the ideal values for the neurons in the next-to-last layer. Just compute the value of the neuron in backwards order (from the last layer to the next-to-last) using the same weights, but you should not multiply; you should divide the value of the output neuron to the corresponding weight. The ideal value of the neuron would be the mean among all of the 10 input data, like in calculating $ \Delta w $ in the previous stage. Please do not rely on the number 10; it should be changeable without rewriting the code. After that, you can repeat this process for next-to-last layer and the layer before that, and so on to the input layer of the neural network. After all of that, you can update all the weights since all the neurons have the ideal value.&lt;/p&gt;&#10;&#10;&lt;p&gt;Break down the logic into separate classes and methods; the problem becomes much easier to program.&lt;/p&gt;&#10;&#10;&lt;p&gt;By the way, the best way of storing weights, biases, and values of the neurons is using matrices and calculate using matrix multiplication. You can look &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_multiplication&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; to understand it and &lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; - how to implement it in a neural network (this is the same video about neural networks). Since this project is not about matrix multiplication, you can use &lt;a href=&quot;http://www.java67.com/2016/10/how-to-multiply-two-matrices-in-java.html&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this implementation&lt;/a&gt; in your program.&lt;/p&gt;&#10;&#10;&lt;p&gt;Additionally, to get started with vectors and matrices, you can check out &lt;a href=&quot;http://www.youtube.com/watch?v=fNk_zzaMoSs&amp;amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this series of videos&lt;/a&gt;. You only need the first 4 videos from it. The other videos dig more into linear algebra instead of vectors and matrices.&lt;/p&gt;&#10;&#10;&lt;p&gt;Tests of this stage only check for guessing numbers, not learning so you need to make sure the network is loading correctly at the start of the program. This means tests never check option 1 from the output examples below.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;1. Learn the network&#10;2. Guess a number&#10;Your choice: 1&#10;Enter the sizes of the layers: 15 12 12 10&#10;Learning...&#10;Done! Saved to the file.&#10;1. Learn the network&#10;2. Guess a number&#10;Your choice: 2&#10;Input grid:&#10;XX_&#10;__X&#10;_XX&#10;X__&#10;XXX&#10;This number is 2&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/51/stages/280/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5422" />
                      <option name="index" value="4" />
                      <option name="name" value="Layers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="test/DigitRecognitionTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/DigitRecognitionTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import recognition.Main;&#10;&#10;import java.util.*;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;class Clue {&#10;    String answer;&#10;    Clue(int ans) {&#10;        answer = Integer.toString(ans);&#10;    }&#10;}&#10;&#10;public class DigitRecognitionTest extends BaseStageTest&lt;Clue&gt; {&#10;    public DigitRecognitionTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;2\n_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;XX_\n&quot; +&#10;                        &quot;XX_\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(2))&#10;                .setInput(&#10;                    &quot;2\nXX_\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(7))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(9))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(3))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;_XX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(4))&#10;                .setInput(&#10;                    &quot;2\nX_X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(5))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(8))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XX_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(6))&#10;                .setInput(&#10;                    &quot;2\n_XX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;&#10;&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(0))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(1))&#10;                .setInput(&#10;                    &quot;2\n_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;_X_\n&quot; +&#10;                        &quot;_X_\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(2))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(3))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(4))&#10;                .setInput(&#10;                    &quot;2\nX_X\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(5))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(6))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X__\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(7))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;__X\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(8))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot;),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(9))&#10;                .setInput(&#10;                    &quot;2\nXXX\n&quot; +&#10;                        &quot;X_X\n&quot; +&#10;                        &quot;XXX\n&quot; +&#10;                        &quot;__X\n&quot; +&#10;                        &quot;XXX\n&quot;)&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        List&lt;String&gt; lines = reply.lines().collect(Collectors.toList());&#10;        String lastLine = lines.get(lines.size() - 1);&#10;&#10;        String[] lastLineWords = lastLine.split(&quot;\\s+&quot;);&#10;&#10;        List&lt;String&gt; foundedNumbers = new ArrayList&lt;&gt;();&#10;        for (String word : lastLineWords) {&#10;            if (word.matches(&quot;[0-9]+&quot;)) {&#10;                foundedNumbers.add(word);&#10;            }&#10;        }&#10;&#10;        if (foundedNumbers.size() &gt; 1) {&#10;            String numbers = String.join(&quot;, &quot;, foundedNumbers);&#10;            return new CheckResult(false,&#10;                &quot;Last line contains several numbers, &quot; +&#10;                    &quot;you should output only one number.\n&quot; +&#10;                    &quot;Numbers found: &quot; + numbers);&#10;        }&#10;&#10;        if (foundedNumbers.size() == 0) {&#10;            return new CheckResult(false,&#10;                &quot;Last line in output &quot; +&#10;                    &quot;doesn't contain any numbers.&quot;);&#10;        }&#10;&#10;        String founded = foundedNumbers.get(0);&#10;&#10;        if (!founded.equals(clue.answer)) {&#10;            return new CheckResult(false,&#10;                &quot;Last line contains number &quot; + founded + &quot; &quot; +&#10;                    &quot;but expected to contain number &quot; + clue.answer);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/recognition/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/recognition/Main.java" />
                                <option name="text" value="package recognition;&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        int w1=2, w2=1, w3=2, w4=4, w5=-4, w6=4, w7=2, w8=-1, w9=2, b=-5;&#10;        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        String line2 = sc.nextLine();&#10;        String line3 = sc.nextLine();&#10;        String line4 = sc.nextLine();&#10;&#10;        if (line2.charAt(0) == '_') {&#10;            a1 = 0;&#10;        } else {&#10;            a1 = 1;&#10;        }&#10;&#10;        if (line2.charAt(1) == '_') {&#10;            a2 = 0;&#10;        } else {&#10;            a2 = 1;&#10;        }&#10;&#10;        if (line2.charAt(2) == '_') {&#10;            a3 = 0;&#10;        } else {&#10;            a3 = 1;&#10;        }&#10;&#10;        if (line3.charAt(0) == '_') {&#10;            a4 = 0;&#10;        } else {&#10;            a4 = 1;&#10;        }&#10;&#10;        if (line3.charAt(1) == '_') {&#10;            a5 = 0;&#10;        } else {&#10;            a5 = 1;&#10;        }&#10;&#10;        if (line3.charAt(2) == '_') {&#10;            a6 = 0;&#10;        } else {&#10;            a6 = 1;&#10;        }&#10;&#10;        if (line4.charAt(0) == '_') {&#10;            a7 = 0;&#10;        } else {&#10;            a7 = 1;&#10;        }&#10;&#10;        if (line4.charAt(1) == '_') {&#10;            a8 = 0;&#10;        } else {&#10;            a8 = 1;&#10;        }&#10;&#10;        if (line4.charAt(2) == '_') {&#10;            a9 = 0;&#10;        } else {&#10;            a9 = 1;&#10;        }&#10;&#10;        a10 = a1*w1 + a2+w2 + a3*w3 + a4*a4 + a5+w5 + a6*w6 + a7*w7 + a8+w8 + a9+w9;&#10;&#10;        if(a10 &gt; 0) {&#10;            System.out.println(&quot;This number is 1&quot;);&#10;        } else {&#10;            System.out.println(&quot;This number is 0&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563900130000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should upgrade your neural network to work not with 5x3 black-white images, but with real handwritten images of numbers from 0 to 9.&lt;/p&gt;&#10;&#10;&lt;p&gt;To continue the project, you can download &lt;a href=&quot;http://www.dropbox.com/s/q241dampcp3g67f/data.zip?dl=1&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this zip-archive&lt;/a&gt; with 70000 images (that's a lot). The dataset contains 7000 samples of every number. Each sample contains the 28x28 image where each pixel contain a gray value from 0 to 255 (where 0 is white and 255 is black). Every image is converted to the text file so you can straight import it into your program as a layer of input neurons. This is the MNIST database, and it is widely known and commonly used for training various image processing systems.&lt;/p&gt;&#10;&#10;&lt;p&gt;Wikipedia page on MNIST: &lt;a href=&quot;https://en.wikipedia.org/wiki/MNIST_database&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://en.wikipedia.org/wiki/MNIST_database&lt;/a&gt;&lt;br&gt;&#10;Official MNIST page: &lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://yann.lecun.com/exdb/mnist/&lt;/a&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;[ALERT-warning]Please, do not keep the downloaded files inside your project directory because the server can reject large files and you will see the message &lt;strong&gt;&quot;Failed to post submission to the Hyperskill&quot;&lt;/strong&gt;.[/ALERT]&lt;/p&gt;&#10;&#10;&lt;p&gt;The images of this database look like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/dba2d266-b5ba-4c82-9c64-6181f233d5a5/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And the converted image from the zip-archive looks like this (you can open it using a text editor).&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;345&quot; src=&quot;https://ucarecdn.com/dded4b18-0a5e-4c33-b837-7529fae55483/&quot; width=&quot;574&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;As you can see, it represents an image with 28x28 pixels, and each pixel has a value from 0 to 255. Notice that the very last line contains the answer — what this number actually is—so you can train your neural network with this database.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember to divide all the values to 255 to have the input be from 0 to 1, as in the previous stages, but unlike the previous stages, this time you will also have the values in the middle, not just 0 and 1.&lt;/p&gt;&#10;&#10;&lt;p&gt;So, the input layer should contain 28x28 = 784 neurons plus a bias.&lt;/p&gt;&#10;&#10;&lt;p&gt;Unlike in the previous stage where you trained a neural network only on 10 numbers, in this stage, you should train a neural network with many more samples. The only restriction is that the training dataset should contain the same number of every digit. After that, you can test your neural network with other images of this dataset and calculate the accuracy of the predictions of the numbers given by the neural network.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can check out &lt;a href=&quot;http://www.youtube.com/watch?v=aircAruvnKk&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this video&lt;/a&gt; a fourth time and take into account that this is also about handwritten digits in the same MNIST dataset.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can also check out &lt;a href=&quot;http://www.youtube.com/watch?v=IHZwWFHWa-w&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this next video&lt;/a&gt; in the series. The start of the video explains the database and learning you need to implement in this stage. The rest of the video goes with the next stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;Tests of this stage only check for guessing numbers, not learning so you need to make sure the network is loading correctly at the start of the program. Tests never check option 1 and 2 from the output example below.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;1. Learn the network&#10;2. Guess all the numbers&#10;3. Guess number from text file&#10;Your choice: 1&#10;Enter the sizes of the layers: 784 16 16 10&#10;Learning...&#10;Done! Saved to the file.&#10;1. Learn the network&#10;2. Guess all the numbers&#10;3. Guess number from text file&#10;Your choice: 2&#10;Guessing...&#10;The network prediction accuracy: 56731/70000, 81%&#10;1. Learn the network&#10;2. Guess all the numbers&#10;3. Guess number from text file&#10;Your choice: 3&#10;Enter filename: test1.txt&#10;This number is 6&#10;&#10;&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/51/stages/281/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5423" />
                      <option name="index" value="5" />
                      <option name="name" value="On a bigger scale" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="test/DigitRecognitionTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/DigitRecognitionTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import recognition.Main;&#10;&#10;import java.util.*;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;class Clue {&#10;    String answer;&#10;    Clue(int ans) {&#10;        answer = Integer.toString(ans);&#10;    }&#10;}&#10;&#10;public class DigitRecognitionTest extends BaseStageTest&lt;Clue&gt; {&#10;    public DigitRecognitionTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    static String filename = &quot;testfile.txt&quot;;&#10;&#10;&#10;    static String zero = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t56\t105\t220\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t18\t166\t233\t253\t253\t253\t236\t209\t209\t209\t77\t18\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t253\t253\t253\t253\t253\t254\t253\t253\t253\t253\t172\t8\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t57\t238\t253\t253\t253\t253\t253\t254\t253\t253\t253\t253\t253\t119\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t14\t238\t253\t253\t253\t253\t253\t253\t179\t196\t253\t253\t253\t253\t238\t12\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t33\t253\t253\t253\t253\t253\t248\t134\t0\t18\t83\t237\t253\t253\t253\t14\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t164\t253\t253\t253\t253\t253\t128\t0\t0\t0\t0\t57\t119\t214\t253\t94\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t57\t248\t253\t253\t253\t126\t14\t4\t0\t0\t0\t0\t0\t0\t179\t253\t248\t56\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t175\t253\t253\t240\t190\t28\t0\t0\t0\t0\t0\t0\t0\t0\t179\t253\t253\t173\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t178\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t92\t253\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t211\t254\t254\t179\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t135\t255\t209\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t90\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t134\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t178\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t142\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t214\t35\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t253\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t165\t253\t253\t253\t215\t36\t0\t0\t0\t0\t0\t0\t0\t0\t163\t253\t253\t164\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t18\t172\t253\t253\t253\t214\t127\t7\t0\t0\t0\t0\t0\t72\t232\t253\t171\t17\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t8\t182\t253\t253\t253\t253\t162\t56\t0\t0\t0\t64\t240\t253\t253\t14\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t7\t173\t253\t253\t253\t253\t245\t241\t239\t239\t246\t253\t225\t14\t1\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t18\t59\t138\t224\t253\t253\t254\t253\t253\t253\t240\t96\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t37\t104\t192\t255\t253\t253\t182\t73\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String one = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t134\t240\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t255\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t183\t239\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t239\t239\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t238\t238\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t52\t250\t173\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t253\t138\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t143\t254\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t99\t248\t110\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String two = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t107\t226\t255\t254\t254\t254\t135\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t7\t75\t157\t228\t254\t254\t254\t254\t254\t254\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t93\t254\t254\t254\t254\t189\t108\t67\t96\t247\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t56\t251\t254\t234\t139\t20\t2\t0\t0\t18\t239\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t49\t192\t211\t25\t0\t0\t0\t0\t0\t77\t254\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t110\t254\t175\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t71\t251\t245\t45\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t154\t254\t130\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t102\t239\t229\t42\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t65\t243\t251\t108\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t64\t239\t254\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t66\t240\t254\t192\t16\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t15\t239\t254\t240\t55\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t1\t129\t254\t253\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t88\t254\t254\t171\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t53\t241\t254\t254\t243\t230\t230\t189\t106\t18\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t2\t170\t254\t254\t254\t254\t254\t254\t254\t254\t206\t25\t2\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t92\t254\t254\t254\t254\t254\t232\t186\t241\t254\t254\t254\t194\t77\t16\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t92\t254\t254\t242\t128\t44\t19\t0\t23\t58\t140\t234\t254\t254\t232\t81\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t23\t62\t62\t41\t0\t0\t0\t0\t0\t0\t0\t30\t157\t208\t250\t22\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;&#10;    static String three = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t31\t8\t23\t156\t194\t186\t254\t254\t255\t163\t41\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t253\t253\t253\t253\t254\t253\t241\t69\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t68\t193\t179\t78\t78\t78\t186\t253\t253\t226\t18\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t5\t3\t0\t0\t0\t12\t113\t253\t253\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t58\t253\t253\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t37\t186\t254\t254\t133\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t95\t201\t253\t253\t234\t31\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t19\t79\t109\t187\t253\t254\t253\t228\t111\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t201\t253\t253\t253\t253\t254\t253\t247\t219\t62\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t253\t253\t162\t193\t254\t253\t253\t253\t253\t114\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t183\t254\t254\t255\t84\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t12\t54\t218\t254\t233\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t233\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t7\t159\t254\t233\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t77\t253\t254\t195\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t121\t83\t0\t0\t0\t0\t0\t0\t49\t209\t254\t255\t39\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t195\t222\t26\t0\t0\t0\t13\t65\t196\t253\t253\t76\t6\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t128\t254\t217\t175\t86\t153\t224\t253\t253\t253\t192\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t45\t186\t253\t253\t253\t253\t254\t253\t240\t146\t5\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t103\t155\t245\t253\t231\t147\t40\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String four = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t29\t220\t207\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t125\t225\t254\t249\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t127\t255\t254\t246\t86\t0\t0\t0\t0\t0\t0\t93\t245\t149\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t164\t254\t249\t87\t0\t0\t0\t0\t0\t0\t93\t248\t254\t244\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t97\t245\t254\t175\t0\t0\t0\t0\t0\t0\t0\t182\t254\t254\t233\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t56\t234\t254\t204\t10\t0\t0\t0\t0\t0\t0\t9\t203\t254\t254\t111\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t190\t254\t254\t139\t0\t0\t0\t0\t0\t0\t6\t216\t254\t254\t222\t19\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t245\t254\t254\t229\t118\t63\t63\t63\t63\t123\t197\t254\t254\t249\t99\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t113\t253\t254\t254\t254\t254\t254\t254\t254\t254\t254\t254\t253\t101\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t73\t151\t217\t254\t254\t254\t254\t254\t254\t254\t254\t113\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t15\t58\t155\t155\t155\t194\t254\t254\t229\t15\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t117\t254\t254\t61\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t40\t242\t254\t224\t10\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t150\t254\t249\t103\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t227\t254\t213\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t150\t254\t254\t68\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t214\t254\t187\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t59\t249\t254\t151\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t222\t254\t243\t40\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3\t140\t254\t159\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;&#10;    static String five = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t170\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t57\t56\t0\t0\t57\t168\t253\t251\t168\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t254\t253\t254\t253\t254\t253\t254\t253\t169\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t253\t251\t253\t251\t253\t251\t253\t251\t253\t251\t56\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t169\t255\t253\t254\t253\t254\t253\t254\t253\t114\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t253\t251\t196\t83\t84\t83\t84\t83\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t169\t255\t253\t169\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t253\t251\t168\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t254\t253\t85\t28\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t114\t253\t251\t253\t251\t253\t196\t169\t168\t114\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t253\t254\t253\t254\t253\t254\t253\t254\t253\t254\t253\t57\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t251\t253\t251\t253\t251\t253\t251\t253\t251\t253\t251\t225\t56\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t57\t168\t169\t168\t0\t0\t0\t0\t57\t168\t254\t253\t254\t253\t57\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t139\t251\t253\t251\t168\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t29\t197\t254\t253\t169\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t197\t251\t253\t251\t56\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t253\t169\t0\t0\t0\t0\t0\t29\t197\t254\t253\t254\t196\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t251\t225\t168\t169\t168\t169\t168\t197\t251\t253\t251\t196\t28\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t57\t168\t254\t253\t254\t253\t254\t253\t254\t253\t226\t168\t114\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t139\t251\t253\t251\t253\t251\t196\t83\t56\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;&#10;    static String six = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t129\t255\t120\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t247\t254\t192\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t57\t249\t254\t254\t85\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t31\t220\t254\t254\t125\t1\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t23\t214\t254\t249\t114\t13\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t28\t191\t254\t254\t109\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t32\t219\t254\t251\t142\t1\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t254\t254\t188\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t69\t241\t254\t254\t79\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t240\t254\t254\t254\t242\t101\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t44\t249\t254\t243\t242\t254\t239\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t231\t254\t175\t25\t16\t156\t254\t240\t36\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t136\t254\t254\t86\t0\t0\t22\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t208\t9\t0\t0\t15\t254\t254\t89\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t105\t0\t0\t0\t15\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t120\t0\t0\t0\t117\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t176\t254\t242\t73\t0\t40\t243\t254\t236\t32\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t9\t208\t254\t247\t163\t214\t254\t254\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t21\t184\t254\t254\t254\t252\t191\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t13\t141\t188\t235\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String seven = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t175\t140\t17\t83\t41\t0\t0\t0\t0\t0\t132\t251\t49\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t99\t247\t254\t252\t254\t253\t238\t164\t154\t117\t201\t254\t254\t73\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t69\t246\t254\t254\t254\t191\t218\t254\t254\t254\t254\t254\t254\t187\t3\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t179\t254\t254\t173\t52\t2\t7\t85\t99\t99\t167\t254\t250\t55\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t67\t250\t254\t146\t2\t0\t0\t0\t0\t0\t0\t134\t254\t156\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t81\t254\t196\t16\t0\t0\t0\t0\t0\t0\t79\t250\t249\t56\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t8\t26\t11\t0\t0\t0\t0\t0\t0\t0\t136\t254\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19\t231\t249\t58\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t127\t254\t153\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t65\t232\t235\t89\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t254\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t77\t247\t214\t10\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t6\t174\t254\t133\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t125\t254\t228\t46\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t235\t254\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t144\t254\t216\t11\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t76\t247\t254\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t146\t255\t234\t49\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t22\t238\t255\t120\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t120\t254\t237\t23\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String eight = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t114\t196\t254\t254\t160\t7\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t170\t253\t249\t243\t165\t250\t205\t36\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t81\t214\t253\t195\t53\t0\t0\t169\t253\t173\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t184\t253\t209\t16\t0\t0\t0\t169\t253\t173\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t21\t232\t253\t158\t0\t0\t0\t70\t227\t253\t144\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t3\t191\t253\t245\t67\t0\t19\t219\t253\t229\t37\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t249\t253\t220\t87\t228\t253\t230\t47\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t129\t253\t253\t253\t253\t235\t77\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t171\t253\t253\t253\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t83\t228\t253\t253\t253\t118\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t226\t253\t190\t229\t253\t251\t70\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t8\t201\t253\t170\t2\t4\t231\t253\t228\t19\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t121\t253\t174\t10\t0\t0\t49\t236\t253\t75\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t51\t246\t197\t38\t0\t0\t0\t0\t214\t253\t128\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t2\t93\t253\t159\t0\t0\t0\t0\t0\t214\t253\t129\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t0\t0\t0\t0\t214\t253\t90\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t0\t0\t1\t122\t251\t244\t72\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t34\t110\t191\t253\t253\t110\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t1\t121\t253\t247\t244\t248\t253\t253\t225\t119\t3\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t16\t195\t253\t253\t253\t234\t152\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String nine = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t64\t163\t163\t247\t221\t247\t130\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t16\t139\t190\t249\t253\t254\t253\t253\t253\t253\t136\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t196\t253\t253\t250\t216\t101\t36\t67\t253\t253\t135\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t253\t192\t69\t0\t0\t0\t108\t253\t207\t20\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t14\t232\t254\t233\t23\t0\t0\t0\t0\t159\t253\t72\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t19\t254\t255\t234\t49\t27\t0\t0\t94\t241\t254\t105\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t8\t173\t254\t253\t244\t235\t145\t145\t239\t253\t223\t31\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t185\t250\t253\t253\t253\t254\t253\t253\t99\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t50\t131\t144\t183\t254\t253\t185\t12\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t155\t254\t253\t127\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t228\t255\t192\t13\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t8\t204\t253\t212\t14\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t253\t253\t91\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t233\t253\t207\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t210\t253\t253\t72\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t99\t254\t254\t209\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t247\t253\t253\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t254\t253\t221\t27\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t162\t254\t253\t55\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t148\t254\t233\t23\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        List&lt;TestCase&lt;Clue&gt;&gt; tests = new ArrayList&lt;&gt;();&#10;&#10;        int i = 0;&#10;        for (String file : new String[]{zero, one, two, three, four, five, six, seven, eight, nine}) {&#10;            tests.add(new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(i))&#10;                .setInput(&quot;3\n&quot; + file)&#10;                .addFile(filename, file)&#10;            );&#10;            i++;&#10;        }&#10;&#10;        return tests;&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        List&lt;String&gt; lines = reply.lines().collect(Collectors.toList());&#10;        String lastLine = lines.get(lines.size() - 1);&#10;&#10;        String[] lastLineWords = lastLine.split(&quot;\\s+&quot;);&#10;&#10;        List&lt;String&gt; foundedNumbers = new ArrayList&lt;&gt;();&#10;        for (String word : lastLineWords) {&#10;            if (word.matches(&quot;[0-9]+&quot;)) {&#10;                foundedNumbers.add(word);&#10;            }&#10;        }&#10;&#10;        if (foundedNumbers.size() &gt; 1) {&#10;            String numbers = String.join(&quot;, &quot;, foundedNumbers);&#10;            return new CheckResult(false,&#10;                &quot;Last line contains several numbers, &quot; +&#10;                    &quot;you should output only one number.\n&quot; +&#10;                    &quot;Numbers found: &quot; + numbers);&#10;        }&#10;&#10;        if (foundedNumbers.size() == 0) {&#10;            return new CheckResult(false,&#10;                &quot;Last line in output &quot; +&#10;                    &quot;doesn't contain any numbers.&quot;);&#10;        }&#10;&#10;        String founded = foundedNumbers.get(0);&#10;&#10;        if (!founded.equals(clue.answer)) {&#10;            return new CheckResult(false,&#10;                &quot;Last line contains number &quot; + founded + &quot; &quot; +&#10;                    &quot;but expected to contain number &quot; + clue.answer);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/recognition/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/recognition/Main.java" />
                                <option name="text" value="package recognition;&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        int w1=2, w2=1, w3=2, w4=4, w5=-4, w6=4, w7=2, w8=-1, w9=2, b=-5;&#10;        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        String line2 = sc.nextLine();&#10;        String line3 = sc.nextLine();&#10;        String line4 = sc.nextLine();&#10;&#10;        if (line2.charAt(0) == '_') {&#10;            a1 = 0;&#10;        } else {&#10;            a1 = 1;&#10;        }&#10;&#10;        if (line2.charAt(1) == '_') {&#10;            a2 = 0;&#10;        } else {&#10;            a2 = 1;&#10;        }&#10;&#10;        if (line2.charAt(2) == '_') {&#10;            a3 = 0;&#10;        } else {&#10;            a3 = 1;&#10;        }&#10;&#10;        if (line3.charAt(0) == '_') {&#10;            a4 = 0;&#10;        } else {&#10;            a4 = 1;&#10;        }&#10;&#10;        if (line3.charAt(1) == '_') {&#10;            a5 = 0;&#10;        } else {&#10;            a5 = 1;&#10;        }&#10;&#10;        if (line3.charAt(2) == '_') {&#10;            a6 = 0;&#10;        } else {&#10;            a6 = 1;&#10;        }&#10;&#10;        if (line4.charAt(0) == '_') {&#10;            a7 = 0;&#10;        } else {&#10;            a7 = 1;&#10;        }&#10;&#10;        if (line4.charAt(1) == '_') {&#10;            a8 = 0;&#10;        } else {&#10;            a8 = 1;&#10;        }&#10;&#10;        if (line4.charAt(2) == '_') {&#10;            a9 = 0;&#10;        } else {&#10;            a9 = 1;&#10;        }&#10;&#10;        a10 = a1*w1 + a2+w2 + a3*w3 + a4*a4 + a5+w5 + a6*w6 + a7*w7 + a8+w8 + a9+w9;&#10;&#10;        if(a10 &gt; 0) {&#10;            System.out.println(&quot;This number is 1&quot;);&#10;        } else {&#10;            System.out.println(&quot;This number is 0&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563900132000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Theory&lt;/h2&gt;&#10;&#10;&lt;p&gt;As you noticed in the previous stages, you probably have a pretty low prediction accuracy. This is because of the learning method, which is easy and straightforward. In this stage, you will implement a more advanced universal method called &lt;strong&gt;backpropagation&lt;/strong&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;The backpropagation algorithm uses the idea of gradient descent to train the neural network. You can check out &lt;a href=&quot;http://www.youtube.com/watch?v=IHZwWFHWa-w&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this video&lt;/a&gt; about gradient descent and &lt;a href=&quot;http://www.youtube.com/watch?v=Ilg3gGewQ5U&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;this video&lt;/a&gt; about backpropagation to get started.&lt;/p&gt;&#10;&#10;&lt;p&gt;The backpropagation method consists of 4 steps:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;  &lt;li&gt;Calculate the value of the neuron in the forward direction.&lt;/li&gt;&#10;  &lt;li&gt;Calculate the error of the each neuron. In the formulas below, this error is marked as $ \delta_{(a_i)} ^n$ where $ a_i $ is the neuron in which we calculated this error and n is the layer number. When the n is -1 it means that this is the last layer of the network (output layer).&lt;/li&gt;&#10;  &lt;li&gt;Calculate the error of the each weight. In the formulas below, this error is marked as $ \Delta w_{(a_i, a_j)} ^n$ where the weight points from the neuron $ a_i $ to the neuron $ a_j $ and the n in a generation number. This is pretty much the sames as in the previous stages.&lt;/li&gt;&#10;  &lt;li&gt;Process steps 1-3 for all of the data (or only part of it, so you don’t have to wait a couple of hours or even days) and then adjust all of the weights with the mean error. This is similar to in the previous stages, too.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;The core backpropagation technique lies in the second step of the steps above.&lt;/p&gt;&#10;&#10;&lt;p&gt;Like the video says, you need to go from the end of the network layer by layer to the start of the network. First, you need to calculate the errors in the last layer of the network. For this, you can use the formula below:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \delta^{-1}_{(a_i)} = (a_i^{ideal} - a_i) * (1 - a_i) * a_i $&lt;/p&gt;&#10;&#10;&lt;p&gt;$ a_i^{ideal} $ is the ideal value for this neuron. In can be one or zero, depending on the input number. So, like in the previous stages, the last layer should contain a single 1 and all other should contain 0 as the ideal values. And the $ a_i $ is the real value of this neuron.&lt;/p&gt;&#10;&#10;&lt;p&gt;After calculating all of the errors in the last layer, let's calculate all of the errors in the next-to-last layer using the following formula:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \delta ^n_{(a_i)} = a_i * (1-a_i) * \sum\limits_{\delta_{(a_j)} \in \delta^{n+1}} \delta_{(a_j)} * w_{(a_i, a_j)}$&lt;/p&gt;&#10;&#10;&lt;p&gt;If you do not understand all of the symbols here is a quick explanation: The error of the current layer depends on the error of the next layers. Basically, the second half of the equation says that you need to take all of the errors already calculated in the next layer (since we process errors from the end to the start they must be already calculated) and multiply them to the corresponding weights from the current processing neuron to the neuron in the next layer with this error. The sum of this pairwise multiplications is the right part of the equation.&lt;/p&gt;&#10;&#10;&lt;p&gt;Notice, that you don't need to calculate an error in the biases even though they are also considered to be neurons. This is because bias neurons always have 1 inside them. By the same logic, you also don't need to calculate an error in the input neurons. They always have some input image.&lt;/p&gt;&#10;&#10;&lt;p&gt;The next step is to calculate the error in the weights. For each weight use this formula below:&lt;/p&gt;&#10;&#10;&lt;p&gt;$ \Delta w_{(a_i, a_j)} = \eta * a_i * \delta_{(a_j)}$&lt;/p&gt;&#10;&#10;&lt;p&gt;Where $\eta$ is the learning rate coefficient. In this stage use value 0.8. Then multiply it to the value of the neuron that this weight points from and also multiply it to the error of the neuron that this weight points to. Note that in one case there is just value of the neuron; in another case, there is an error calculated in the previous step. This is important.&lt;/p&gt;&#10;&#10;&lt;p&gt;After calculating errors in all of the weights in all of the training examples you can calculate the weights for the new generation. Use the following formula (it didn't change from the previous stages).&lt;/p&gt;&#10;&#10;&lt;p&gt;$ w_{(a_i, a_j)}^{n+1} = w_{(a_i, a_j)}^{n} + \Delta w_{(a_i, a_j)}^{mean} $&lt;/p&gt;&#10;&#10;&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should implement such an algorithm instead of the Delta rule you were using in the previous stages.&lt;/p&gt;&#10;&#10;&lt;p&gt;Try to actually refactor the code allowing to choose the algorithm - delta rule or backpropagation. In this case, the solver should be a separate class that processes the neural network — updates all the weights to the next generation.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;1. Learn the network&#10;2. Guess all the numbers&#10;3. Guess number from text file&#10;Your choice: 1&#10;Enter the sizes of the layers: 784 16 16 10&#10;Enter the algorithm (delta, backprop): backprop&#10;Learning...&#10;Done! Saved to the file.&#10;1. Learn the network&#10;2. Guess all the numbers&#10;3. Guess number from text file&#10;Your choice: 2&#10;Guessing...&#10;The network prediction accuracy: 56731/70000, 81%&#10;1. Learn the network&#10;2. Guess all the numbers&#10;3. Guess number from text file&#10;Your choice: 3&#10;Enter filename: test1.txt&#10;This number is 6&#10;&#10;&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/51/stages/282/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5424" />
                      <option name="index" value="6" />
                      <option name="name" value="Backpropagation" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="test/DigitRecognitionTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/DigitRecognitionTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import recognition.Main;&#10;&#10;import java.util.*;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;class Clue {&#10;    String answer;&#10;    Clue(int ans) {&#10;        answer = Integer.toString(ans);&#10;    }&#10;}&#10;&#10;public class DigitRecognitionTest extends BaseStageTest&lt;Clue&gt; {&#10;    public DigitRecognitionTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    static String filename = &quot;testfile.txt&quot;;&#10;&#10;&#10;    static String zero = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t56\t105\t220\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t18\t166\t233\t253\t253\t253\t236\t209\t209\t209\t77\t18\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t253\t253\t253\t253\t253\t254\t253\t253\t253\t253\t172\t8\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t57\t238\t253\t253\t253\t253\t253\t254\t253\t253\t253\t253\t253\t119\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t14\t238\t253\t253\t253\t253\t253\t253\t179\t196\t253\t253\t253\t253\t238\t12\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t33\t253\t253\t253\t253\t253\t248\t134\t0\t18\t83\t237\t253\t253\t253\t14\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t164\t253\t253\t253\t253\t253\t128\t0\t0\t0\t0\t57\t119\t214\t253\t94\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t57\t248\t253\t253\t253\t126\t14\t4\t0\t0\t0\t0\t0\t0\t179\t253\t248\t56\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t175\t253\t253\t240\t190\t28\t0\t0\t0\t0\t0\t0\t0\t0\t179\t253\t253\t173\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t178\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t92\t253\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t211\t254\t254\t179\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t135\t255\t209\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t90\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t134\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t178\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t142\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t209\t253\t253\t214\t35\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t253\t253\t208\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t165\t253\t253\t253\t215\t36\t0\t0\t0\t0\t0\t0\t0\t0\t163\t253\t253\t164\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t18\t172\t253\t253\t253\t214\t127\t7\t0\t0\t0\t0\t0\t72\t232\t253\t171\t17\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t8\t182\t253\t253\t253\t253\t162\t56\t0\t0\t0\t64\t240\t253\t253\t14\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t7\t173\t253\t253\t253\t253\t245\t241\t239\t239\t246\t253\t225\t14\t1\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t18\t59\t138\t224\t253\t253\t254\t253\t253\t253\t240\t96\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t37\t104\t192\t255\t253\t253\t182\t73\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String one = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t134\t240\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t255\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t183\t239\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t239\t239\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t238\t238\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t52\t250\t173\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t253\t138\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t143\t254\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t99\t248\t110\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String two = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t107\t226\t255\t254\t254\t254\t135\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t7\t75\t157\t228\t254\t254\t254\t254\t254\t254\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t93\t254\t254\t254\t254\t189\t108\t67\t96\t247\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t56\t251\t254\t234\t139\t20\t2\t0\t0\t18\t239\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t49\t192\t211\t25\t0\t0\t0\t0\t0\t77\t254\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t110\t254\t175\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t71\t251\t245\t45\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t154\t254\t130\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t102\t239\t229\t42\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t65\t243\t251\t108\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t64\t239\t254\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t66\t240\t254\t192\t16\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t15\t239\t254\t240\t55\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t1\t129\t254\t253\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t88\t254\t254\t171\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t53\t241\t254\t254\t243\t230\t230\t189\t106\t18\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t2\t170\t254\t254\t254\t254\t254\t254\t254\t254\t206\t25\t2\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t92\t254\t254\t254\t254\t254\t232\t186\t241\t254\t254\t254\t194\t77\t16\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t92\t254\t254\t242\t128\t44\t19\t0\t23\t58\t140\t234\t254\t254\t232\t81\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t23\t62\t62\t41\t0\t0\t0\t0\t0\t0\t0\t30\t157\t208\t250\t22\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;&#10;    static String three = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t31\t8\t23\t156\t194\t186\t254\t254\t255\t163\t41\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t253\t253\t253\t253\t254\t253\t241\t69\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t68\t193\t179\t78\t78\t78\t186\t253\t253\t226\t18\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t5\t3\t0\t0\t0\t12\t113\t253\t253\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t58\t253\t253\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t37\t186\t254\t254\t133\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t95\t201\t253\t253\t234\t31\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t19\t79\t109\t187\t253\t254\t253\t228\t111\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t201\t253\t253\t253\t253\t254\t253\t247\t219\t62\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t253\t253\t162\t193\t254\t253\t253\t253\t253\t114\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t183\t254\t254\t255\t84\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t12\t54\t218\t254\t233\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t233\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t7\t159\t254\t233\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t77\t253\t254\t195\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t121\t83\t0\t0\t0\t0\t0\t0\t49\t209\t254\t255\t39\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t195\t222\t26\t0\t0\t0\t13\t65\t196\t253\t253\t76\t6\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t128\t254\t217\t175\t86\t153\t224\t253\t253\t253\t192\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t45\t186\t253\t253\t253\t253\t254\t253\t240\t146\t5\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t103\t155\t245\t253\t231\t147\t40\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String four = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t29\t220\t207\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t125\t225\t254\t249\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t127\t255\t254\t246\t86\t0\t0\t0\t0\t0\t0\t93\t245\t149\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t164\t254\t249\t87\t0\t0\t0\t0\t0\t0\t93\t248\t254\t244\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t97\t245\t254\t175\t0\t0\t0\t0\t0\t0\t0\t182\t254\t254\t233\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t56\t234\t254\t204\t10\t0\t0\t0\t0\t0\t0\t9\t203\t254\t254\t111\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t190\t254\t254\t139\t0\t0\t0\t0\t0\t0\t6\t216\t254\t254\t222\t19\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t245\t254\t254\t229\t118\t63\t63\t63\t63\t123\t197\t254\t254\t249\t99\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t113\t253\t254\t254\t254\t254\t254\t254\t254\t254\t254\t254\t253\t101\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t73\t151\t217\t254\t254\t254\t254\t254\t254\t254\t254\t113\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t15\t58\t155\t155\t155\t194\t254\t254\t229\t15\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t117\t254\t254\t61\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t40\t242\t254\t224\t10\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t150\t254\t249\t103\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t227\t254\t213\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t150\t254\t254\t68\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t214\t254\t187\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t59\t249\t254\t151\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t222\t254\t243\t40\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3\t140\t254\t159\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;&#10;    static String five = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t170\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t57\t56\t0\t0\t57\t168\t253\t251\t168\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t254\t253\t254\t253\t254\t253\t254\t253\t169\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t253\t251\t253\t251\t253\t251\t253\t251\t253\t251\t56\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t169\t255\t253\t254\t253\t254\t253\t254\t253\t114\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t253\t251\t196\t83\t84\t83\t84\t83\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t169\t255\t253\t169\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t253\t251\t168\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t254\t253\t85\t28\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t114\t253\t251\t253\t251\t253\t196\t169\t168\t114\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t253\t254\t253\t254\t253\t254\t253\t254\t253\t254\t253\t57\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t251\t253\t251\t253\t251\t253\t251\t253\t251\t253\t251\t225\t56\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t57\t168\t169\t168\t0\t0\t0\t0\t57\t168\t254\t253\t254\t253\t57\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t139\t251\t253\t251\t168\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t29\t197\t254\t253\t169\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t197\t251\t253\t251\t56\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t253\t169\t0\t0\t0\t0\t0\t29\t197\t254\t253\t254\t196\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t85\t251\t225\t168\t169\t168\t169\t168\t197\t251\t253\t251\t196\t28\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t57\t168\t254\t253\t254\t253\t254\t253\t254\t253\t226\t168\t114\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t139\t251\t253\t251\t253\t251\t196\t83\t56\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;&#10;    static String six = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t129\t255\t120\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t247\t254\t192\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t57\t249\t254\t254\t85\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t31\t220\t254\t254\t125\t1\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t23\t214\t254\t249\t114\t13\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t28\t191\t254\t254\t109\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t32\t219\t254\t251\t142\t1\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t254\t254\t188\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t69\t241\t254\t254\t79\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t240\t254\t254\t254\t242\t101\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t44\t249\t254\t243\t242\t254\t239\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t231\t254\t175\t25\t16\t156\t254\t240\t36\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t136\t254\t254\t86\t0\t0\t22\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t208\t9\t0\t0\t15\t254\t254\t89\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t105\t0\t0\t0\t15\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t120\t0\t0\t0\t117\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t176\t254\t242\t73\t0\t40\t243\t254\t236\t32\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t9\t208\t254\t247\t163\t214\t254\t254\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t21\t184\t254\t254\t254\t252\t191\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t13\t141\t188\t235\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String seven = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t175\t140\t17\t83\t41\t0\t0\t0\t0\t0\t132\t251\t49\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t99\t247\t254\t252\t254\t253\t238\t164\t154\t117\t201\t254\t254\t73\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t69\t246\t254\t254\t254\t191\t218\t254\t254\t254\t254\t254\t254\t187\t3\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t179\t254\t254\t173\t52\t2\t7\t85\t99\t99\t167\t254\t250\t55\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t67\t250\t254\t146\t2\t0\t0\t0\t0\t0\t0\t134\t254\t156\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t81\t254\t196\t16\t0\t0\t0\t0\t0\t0\t79\t250\t249\t56\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t8\t26\t11\t0\t0\t0\t0\t0\t0\t0\t136\t254\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19\t231\t249\t58\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t127\t254\t153\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t65\t232\t235\t89\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t254\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t77\t247\t214\t10\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t6\t174\t254\t133\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t125\t254\t228\t46\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t235\t254\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t144\t254\t216\t11\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t76\t247\t254\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t146\t255\t234\t49\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t22\t238\t255\t120\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t120\t254\t237\t23\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String eight = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t114\t196\t254\t254\t160\t7\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t170\t253\t249\t243\t165\t250\t205\t36\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t81\t214\t253\t195\t53\t0\t0\t169\t253\t173\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t184\t253\t209\t16\t0\t0\t0\t169\t253\t173\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t21\t232\t253\t158\t0\t0\t0\t70\t227\t253\t144\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t3\t191\t253\t245\t67\t0\t19\t219\t253\t229\t37\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t249\t253\t220\t87\t228\t253\t230\t47\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t129\t253\t253\t253\t253\t235\t77\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t171\t253\t253\t253\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t83\t228\t253\t253\t253\t118\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t226\t253\t190\t229\t253\t251\t70\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t8\t201\t253\t170\t2\t4\t231\t253\t228\t19\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t121\t253\t174\t10\t0\t0\t49\t236\t253\t75\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t51\t246\t197\t38\t0\t0\t0\t0\t214\t253\t128\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t2\t93\t253\t159\t0\t0\t0\t0\t0\t214\t253\t129\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t0\t0\t0\t0\t214\t253\t90\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t0\t0\t1\t122\t251\t244\t72\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t34\t110\t191\t253\t253\t110\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t1\t121\t253\t247\t244\t248\t253\t253\t225\t119\t3\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t16\t195\t253\t253\t253\t234\t152\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    static String nine = &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t64\t163\t163\t247\t221\t247\t130\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t16\t139\t190\t249\t253\t254\t253\t253\t253\t253\t136\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t196\t253\t253\t250\t216\t101\t36\t67\t253\t253\t135\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t253\t192\t69\t0\t0\t0\t108\t253\t207\t20\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t14\t232\t254\t233\t23\t0\t0\t0\t0\t159\t253\t72\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t19\t254\t255\t234\t49\t27\t0\t0\t94\t241\t254\t105\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t8\t173\t254\t253\t244\t235\t145\t145\t239\t253\t223\t31\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t185\t250\t253\t253\t253\t254\t253\t253\t99\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t50\t131\t144\t183\t254\t253\t185\t12\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t155\t254\t253\t127\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t228\t255\t192\t13\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t8\t204\t253\t212\t14\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t253\t253\t91\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t233\t253\t207\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t210\t253\t253\t72\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t99\t254\t254\t209\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t247\t253\t253\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t254\t253\t221\t27\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t162\t254\t253\t55\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t148\t254\t233\t23\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot; +&#10;        &quot;0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n&quot;;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        List&lt;TestCase&lt;Clue&gt;&gt; tests = new ArrayList&lt;&gt;();&#10;&#10;        int i = 0;&#10;        for (String file : new String[]{zero, one, two, three, four, five, six, seven, eight, nine}) {&#10;            tests.add(new TestCase&lt;Clue&gt;()&#10;                .setAttach(new Clue(i))&#10;                .setInput(&quot;3\n&quot; + file)&#10;                .addFile(filename, file)&#10;            );&#10;            i++;&#10;        }&#10;&#10;        return tests;&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        List&lt;String&gt; lines = reply.lines().collect(Collectors.toList());&#10;        String lastLine = lines.get(lines.size() - 1);&#10;&#10;        String[] lastLineWords = lastLine.split(&quot;\\s+&quot;);&#10;&#10;        List&lt;String&gt; foundedNumbers = new ArrayList&lt;&gt;();&#10;        for (String word : lastLineWords) {&#10;            if (word.matches(&quot;[0-9]+&quot;)) {&#10;                foundedNumbers.add(word);&#10;            }&#10;        }&#10;&#10;        if (foundedNumbers.size() &gt; 1) {&#10;            String numbers = String.join(&quot;, &quot;, foundedNumbers);&#10;            return new CheckResult(false,&#10;                &quot;Last line contains several numbers, &quot; +&#10;                    &quot;you should output only one number.\n&quot; +&#10;                    &quot;Numbers found: &quot; + numbers);&#10;        }&#10;&#10;        if (foundedNumbers.size() == 0) {&#10;            return new CheckResult(false,&#10;                &quot;Last line in output &quot; +&#10;                    &quot;doesn't contain any numbers.&quot;);&#10;        }&#10;&#10;        String founded = foundedNumbers.get(0);&#10;&#10;        if (!founded.equals(clue.answer)) {&#10;            return new CheckResult(false,&#10;                &quot;Last line contains number &quot; + founded + &quot; &quot; +&#10;                    &quot;but expected to contain number &quot; + clue.answer);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/recognition/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/recognition/Main.java" />
                                <option name="text" value="package recognition;&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        int w1=2, w2=1, w3=2, w4=4, w5=-4, w6=4, w7=2, w8=-1, w9=2, b=-5;&#10;        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        String line2 = sc.nextLine();&#10;        String line3 = sc.nextLine();&#10;        String line4 = sc.nextLine();&#10;&#10;        if (line2.charAt(0) == '_') {&#10;            a1 = 0;&#10;        } else {&#10;            a1 = 1;&#10;        }&#10;&#10;        if (line2.charAt(1) == '_') {&#10;            a2 = 0;&#10;        } else {&#10;            a2 = 1;&#10;        }&#10;&#10;        if (line2.charAt(2) == '_') {&#10;            a3 = 0;&#10;        } else {&#10;            a3 = 1;&#10;        }&#10;&#10;        if (line3.charAt(0) == '_') {&#10;            a4 = 0;&#10;        } else {&#10;            a4 = 1;&#10;        }&#10;&#10;        if (line3.charAt(1) == '_') {&#10;            a5 = 0;&#10;        } else {&#10;            a5 = 1;&#10;        }&#10;&#10;        if (line3.charAt(2) == '_') {&#10;            a6 = 0;&#10;        } else {&#10;            a6 = 1;&#10;        }&#10;&#10;        if (line4.charAt(0) == '_') {&#10;            a7 = 0;&#10;        } else {&#10;            a7 = 1;&#10;        }&#10;&#10;        if (line4.charAt(1) == '_') {&#10;            a8 = 0;&#10;        } else {&#10;            a8 = 1;&#10;        }&#10;&#10;        if (line4.charAt(2) == '_') {&#10;            a9 = 0;&#10;        } else {&#10;            a9 = 1;&#10;        }&#10;&#10;        a10 = a1*w1 + a2+w2 + a3*w3 + a4*a4 + a5+w5 + a6*w6 + a7*w7 + a8+w8 + a9+w9;&#10;&#10;        if(a10 &gt; 0) {&#10;            System.out.println(&quot;This number is 1&quot;);&#10;        } else {&#10;            System.out.println(&quot;This number is 0&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563900132000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>